import math
import pandas_datareader as web
import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt

nvda = yf.Ticker('NVDA')
nvda = nvda.history(period='5y')
nvda

del nvda['Dividends']
del nvda['Stock Splits']
nvda

nvda.drop(nvda.tail(1).index,inplace=True)

nvda.shape

plt.plot(nvda.index, nvda['Close'])

# Add title and labels
plt.title('NVDA Performance')
plt.xlabel('Years')
plt.ylabel('Close Price')


# Set the figure size
plt.figure(figsize=(16, 8))

plt.savefig("Line graph of NVDA.png")
plt.show()

nvda = nvda.filter(['Close'])

dataset = nvda.values

# Model to train data
training_data_len = math.ceil( len(dataset) * 0.8)

training_data_len

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

training_data = scaled_data[0:training_data_len , :]
#Split the data into x_train and y_train
x_train = []
y_train = []

for i in range(60, len(training_data)):
    x_train.append(training_data[i-60:i, 0])
    y_train.append(training_data[i, 0])
    if i<= 61:
        print(x_train)
        print(y_train)
        print()

x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

from keras.layers import Input 

model = Sequential()
model.add(Input(shape=(x_train.shape[1], 1)))  # Define input shape using Input layer
model.add(LSTM(50, return_sequences=True))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs=1)

test_data = scaled_data[training_data_len - 60: , :]

x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

x_test = np.array(x_test)

x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

rmse = np.sqrt( np.mean(predictions - y_test )**2)
rmse

train = nvda[:training_data_len]
valid = nvda[training_data_len:]

valid.loc[:, 'Predictions'] = predictions

plt.figure(figsize=(16,8))
plt.title('NVDA Predctions', fontsize=20)
plt.xlabel('Years', fontsize=18)
plt.ylabel('Close Price', fontsize=18)


plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Close', 'Val', 'Predictions'], loc='lower right')

plt.savefig("NVDA_predictions_Validations.png")
plt.show()

valid.tail(60)

data = {
    'Date': [
        '2024-05-29 00:00:00-04:00', '2024-05-30 00:00:00-04:00', '2024-05-31 00:00:00-04:00',
        '2024-06-03 00:00:00-04:00', '2024-06-04 00:00:00-04:00', '2024-06-05 00:00:00-04:00',
        '2024-06-06 00:00:00-04:00', '2024-06-07 00:00:00-04:00', '2024-06-10 00:00:00-04:00',
        '2024-06-11 00:00:00-04:00', '2024-06-12 00:00:00-04:00', '2024-06-13 00:00:00-04:00',
        '2024-06-14 00:00:00-04:00', '2024-06-17 00:00:00-04:00', '2024-06-18 00:00:00-04:00',
        '2024-06-20 00:00:00-04:00', '2024-06-21 00:00:00-04:00', '2024-06-24 00:00:00-04:00',
        '2024-06-25 00:00:00-04:00', '2024-06-26 00:00:00-04:00', '2024-06-27 00:00:00-04:00',
        '2024-06-28 00:00:00-04:00', '2024-07-01 00:00:00-04:00', '2024-07-02 00:00:00-04:00',
        '2024-07-03 00:00:00-04:00', '2024-07-05 00:00:00-04:00', '2024-07-08 00:00:00-04:00',
        '2024-07-09 00:00:00-04:00', '2024-07-10 00:00:00-04:00', '2024-07-11 00:00:00-04:00',
        '2024-07-12 00:00:00-04:00', '2024-07-15 00:00:00-04:00', '2024-07-16 00:00:00-04:00',
        '2024-07-17 00:00:00-04:00', '2024-07-18 00:00:00-04:00', '2024-07-19 00:00:00-04:00',
        '2024-07-22 00:00:00-04:00', '2024-07-23 00:00:00-04:00', '2024-07-24 00:00:00-04:00',
        '2024-07-25 00:00:00-04:00', '2024-07-26 00:00:00-04:00', '2024-07-29 00:00:00-04:00',
        '2024-07-30 00:00:00-04:00', '2024-07-31 00:00:00-04:00', '2024-08-01 00:00:00-04:00',
        '2024-08-02 00:00:00-04:00', '2024-08-05 00:00:00-04:00', '2024-08-06 00:00:00-04:00',
        '2024-08-07 00:00:00-04:00', '2024-08-08 00:00:00-04:00', '2024-08-09 00:00:00-04:00',
        '2024-08-12 00:00:00-04:00', '2024-08-13 00:00:00-04:00', '2024-08-14 00:00:00-04:00',
        '2024-08-15 00:00:00-04:00', '2024-08-16 00:00:00-04:00', '2024-08-19 00:00:00-04:00',
        '2024-08-20 00:00:00-04:00', '2024-08-21 00:00:00-04:00', '2024-08-22 00:00:00-04:00'
    ],
    'Close': [
        114.815567, 110.490921, 109.624001, 114.990555, 116.427429, 122.429947, 
        120.988060, 120.878075, 121.779999, 120.910004, 125.199997, 129.610001, 
        131.880005, 130.979996, 135.580002, 130.779999, 126.570000, 118.110001, 
        126.089996, 126.400002, 123.989998, 123.540001, 124.300003, 122.669998, 
        128.279999, 125.830002, 128.199997, 131.380005, 134.910004, 127.400002, 
        129.240005, 128.440002, 126.360001, 117.989998, 121.089996, 117.930000, 
        123.540001, 122.589996, 114.250000, 112.279999, 113.059998, 111.589996, 
        103.730003, 117.019997, 109.209999, 107.269997, 100.449997, 104.250000, 
        98.910004, 104.970001, 104.750000, 109.019997, 116.139999, 118.080002, 
        122.860001, 124.580002, 130.000000, 127.250000, 128.500000, 123.739998
    ],
    'Predictions': [
        99.458435, 102.551620, 104.677299, 105.956055, 107.345314, 108.721931, 
        110.658623, 112.339882, 113.654472, 114.717812, 115.382263, 116.319046, 
        117.774521, 119.515900, 121.003479, 122.753784, 123.710060, 123.657898, 
        122.081886, 121.108215, 120.508575, 119.861870, 119.252815, 118.852127, 
        118.393196, 118.714966, 118.995224, 119.551826, 120.548111, 122.035645, 
        122.546165, 122.832558, 122.843864, 122.461143, 120.886719, 119.446747, 
        117.828453, 117.110252, 116.746849, 115.544289, 113.940475, 112.488785, 
        111.117813, 108.976379, 108.567703, 107.914314, 107.066895, 105.377747, 
        104.077301, 102.415398, 101.652260, 101.350647, 101.880928, 103.635834, 
        105.930336, 108.768051, 111.642326, 114.806274, 117.241997, 119.161171
    ]
}

df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date'])  # Convert Date column to datetime

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Close'], marker='o', label='Close Price')
plt.plot(df['Date'], df['Predictions'], marker='o', label='Predictions')

plt.title('Close Price and Predictions in the last 60 days')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.xticks(rotation=45)

plt.savefig("NVDA_Close_and_Predictions.png")
plt.show()
